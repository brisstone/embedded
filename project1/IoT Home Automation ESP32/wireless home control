//#include "soc/rtc_wdt.h"
//#include <FreeSerif9pt7b.h>
#include <SPI.h>
#include <Wire.h>
#include "WiFi.h"
#include "ESPAsyncWebServer.h"
#include "SPIFFS.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SH1106.h>




// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

#define OLED_SDA 21
#define OLED_SCL 22

Adafruit_SH1106 display(21, 22);

#define NUMFLAKES 10
#define XPOS 0
#define YPOS 1
#define DELTAY 2

const char index_html[] PROGMEM = R"rawliteral(<!DOCTYPE HTML>
<head>
  <title>MY HOME</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <style>
    html {font-family: Arial; display: inline-block; text-align: center;}
    p {  font-size: 1.2rem;}
    body {  margin: 0;}
    h5 {color: #326ECF}
    .topnav { overflow: hidden; background-color:#a0d6b4; color: white; font-size: 1.7rem; }
    .content { padding: 20px; }
    .card { background-color: white; box-shadow: 2px 2px 12px 1px rgba(140,140,140,.5); padding:20px }
    .cards { max-width: 700px; margin: 0 auto; display: grid; grid-gap: 2rem; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); }
    .reading { font-size: 1.5rem; }
    .packet { color: #bebebe; }
    .level { color: #326ECF; justify-content: right; }
    .container{ padding: 2px 16px;}
    .machine{font-size: 1.4rem; font-family: Arial; color:green;  margin: 0 auto; display: grid; grid-gap:2rem; grid-template-columns:repeat(auto-fit, minmax(300px, 1fr));}
    .pics{padding: 20px}
    #button1{background-color: gray;  color: white; padding: 10px 25px; text-align: center; text-decoration: none;font-size: 16px; margin: 4px 2px; cursor: pointer;}
    #button2{background-color: gray;  color: white; padding: 10px 25px; text-align: center; text-decoration: none;font-size: 16px; margin: 4px 2px; cursor: pointer;}
  </style>
</head>
<body>
    <div class="topnav">
        <h3>MY HOME</h3>
    </div>
    <div class ="content">
      <h4 class="machine">LIVING ROOM </h4>
    </div>
    <div class = "cards">
      <div class = "card">
        <p>Bulb state: <strong> %BULB_STATE%</strong></p>
        <h4  class="content "> BULB</h4>
        <a href=" /26/on"><input type="button" value="ON" id="button1" /></a> 
        <a href=" /26/off"><input type="button" value="OFF" id="button1" /></a>
      </div>
      <div class = "card">
        <p>Socket state: <strong> %SOCKET_STATE%</strong></p>
        <h4  class="content "> SOCKET</h4>
        <a href=" /25/on"><input type="button" value="ON" id="button1" /></a> 
        <a href=" /25/off"><input type="button" value="OFF" id="button1" /></a>     

    </div>
    </div>


 <script>
 
</script>
<footer>
<div class = "content footer">
<span style="color:#ED6D17">POWERED BY</span>
</div>
<img src ="cpe" width ="100" height="25">
</footer>
</body>
</html>)rawliteral";




const char* ssid = "dayo";
const char* password = "123456789";

const int irPin1 = 18;
const int irPin2 = 19;
const int socketPin = 25;
const int bulbPin = 26;
const int camoPin = 27;
int count = 0;
boolean Socket_status = false;
boolean Bulb_status = false;

String BulbState;

String SocketState;
//boolean insideState = false;
//boolean outsideIr=false;
//boolean isPeopleExiting=false;
int in = 1;
int out = 1;

String processor(const String& var){
  Serial.println(var);
  if(var == "BULB_STATE"){
    if(digitalRead(camoPin)){
      BulbState = "ON";
    }
    else{
      BulbState = "OFF";
    }
    Serial.print(SocketState);
    return BulbState;
  }
  else if( var == "SOCKET_STATE"){
     if(digitalRead(socketPin)){
      SocketState = "ON";
    }
    else{
      SocketState = "OFF";
    }
    Serial.print(SocketState);
    return SocketState;
  }
  return String();
}
void setup() {
  Serial.begin(115200);
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);
  display.display();
  delay(2000);
  display.clearDisplay();

  // draw a single pixel
  display.drawPixel(10, 10, WHITE);
  // Show the display buffer on the hardware.
  // NOTE: You _must_ call display after making any drawing commands
  // to make them visible on the display hardware!
  display.display();
  delay(2000);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("WELCOME");
  display.display();
  delay(2000);

  // miniature bitmap display
  display.clearDisplay();
  display.display();

  pinMode(irPin1, INPUT);
  pinMode(irPin2, INPUT);
  pinMode(camoPin, OUTPUT);
  pinMode(bulbPin, OUTPUT);
  pinMode(socketPin, OUTPUT);
  if(!SPIFFS.begin(true)){
    Serial.println("spiff error");
    return;
  }
  
  Serial.print("Setting AP (Access Point)â€¦");
  // Remove the password parameter, if you want the AP (Access Point) to be open
  WiFi.softAP(ssid, password);

  IPAddress IP = WiFi.softAPIP();
  Serial.print("AP IP address: ");
  Serial.println(IP);
  Serial.println(WiFi.localIP());
  delay(5000);

  server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html, processor);
  });

  server.on("/26/on", HTTP_GET, [](AsyncWebServerRequest * request) {
    digitalWrite(camoPin, HIGH);
    Bulb_status = true;
    BulbState = "ON";
    request->send_P(200, "text/html", index_html, processor);
    server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html, processor);
  });
  });

  server.on("/26/off", HTTP_GET, [](AsyncWebServerRequest * request) {
    digitalWrite(camoPin, LOW);
    Bulb_status = false;
    BulbState = "OFF";
    request->send_P(200, "text/html", index_html, processor);
      server.on("/", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send_P(200, "text/html", index_html, processor);
  });
  });


  server.on("/25/on", HTTP_GET, [](AsyncWebServerRequest * request) {
    SocketState = "ON";
    Socket_status = true;
    digitalWrite(socketPin, HIGH);
    Serial.println("Socket on");
    request->send_P(200, "text/html", index_html,processor);
     
  });

  server.on("/25/off", HTTP_GET, [](AsyncWebServerRequest * request) {
    SocketState = "ON";
    Socket_status = true;
    digitalWrite(socketPin, LOW);
    Serial.println("Socket off");
    request->send_P(200, "text/html", index_html, processor);
  });


  server.on("/lightbulb", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(SPIFFS, "/lightbulb.png", "image/png");
  });


  server.on("/power-socket", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(SPIFFS, "/power-socket.png", "image/png");
  });
  server.on("/cpe", HTTP_GET, [](AsyncWebServerRequest * request) {
    request->send(SPIFFS, "/CPE.png", "image/png");
  });

  server.begin();
}

void loop() {

  if (!digitalRead(irPin1) && in == 1 && out == 1) {
    in += 1;
    Serial.println("attempted entrance");
  }
  else if (!digitalRead(irPin1) && in == 1 && out == 2) {
    count--;
    out = 1;
    delay(500);
  }
  else {
    //    Serial.println("illegal");
    //    in = 1;
  }

  if (!digitalRead(irPin2) && in == 1 && out == 1) {
    out += 1;
    Serial.println("attempted exit");
  }
  else if (!digitalRead(irPin2) && in == 2 && out == 1) {
    count++;
    in = 1;
    delay(500);
  }
  else {
    //    Serial.println("illegal");
    //    out = 1;
  }


  if (count < 0) {
    count = 0;
  }

 
  if( count > 0 || Bulb_status){
    digitalWrite(bulbPin, HIGH);
    Serial.println("bulb on");
  }
  else if ((count <= 0) ||  BulbState == "OFF"){
    digitalWrite(bulbPin, LOW);
    Serial.println("bulb off");
  }

  Serial.println("count: ");
    Serial.println(count);
    display.clearDisplay();
    display.setCursor(0, 20);
    display.print("NO OF PEOPLE");
    display.setCursor(20, 50);
    display.println(count);
    display.display();

}
